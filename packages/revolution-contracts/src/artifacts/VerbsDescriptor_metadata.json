{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_initialOwner",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_tokenNamePrefix",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "baseURI",
						"type": "string"
					}
				],
				"name": "BaseURIUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "DataURIToggled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "PartsLocked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "baseURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "image",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "animation_url",
								"type": "string"
							}
						],
						"internalType": "struct VerbsDescriptor.TokenURIParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "constructTokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "enum ICultureIndex.MediaType",
								"name": "mediaType",
								"type": "uint8"
							},
							{
								"internalType": "string",
								"name": "image",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "text",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "animationUrl",
								"type": "string"
							}
						],
						"internalType": "struct ICultureIndex.ArtPieceMetadata",
						"name": "metadata",
						"type": "tuple"
					}
				],
				"name": "dataURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "enum ICultureIndex.MediaType",
								"name": "mediaType",
								"type": "uint8"
							},
							{
								"internalType": "string",
								"name": "image",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "text",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "animationUrl",
								"type": "string"
							}
						],
						"internalType": "struct ICultureIndex.ArtPieceMetadata",
						"name": "metadata",
						"type": "tuple"
					}
				],
				"name": "genericDataURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isDataURIEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_baseURI",
						"type": "string"
					}
				],
				"name": "setBaseURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "toggleDataURIEnabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenNamePrefix",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "enum ICultureIndex.MediaType",
								"name": "mediaType",
								"type": "uint8"
							},
							{
								"internalType": "string",
								"name": "image",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "text",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "animationUrl",
								"type": "string"
							}
						],
						"internalType": "struct ICultureIndex.ArtPieceMetadata",
						"name": "metadata",
						"type": "tuple"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setBaseURI(string)": {
					"details": "This can only be called by the owner."
				},
				"toggleDataURIEnabled()": {
					"details": "This can only be called by the owner."
				},
				"tokenURI(uint256,(string,string,uint8,string,string,string))": {
					"details": "The returned value may be a base64 encoded data URI or an API URL."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructTokenURI((string,string,string,string))": {
					"notice": "Construct an ERC721 token URI."
				},
				"dataURI(uint256,(string,string,uint8,string,string,string))": {
					"notice": "Given a token ID, construct a base64 encoded data URI for an official Vrbs DAO verb."
				},
				"genericDataURI(string,(string,string,uint8,string,string,string))": {
					"notice": "Given a name, and metadata, construct a base64 encoded data URI."
				},
				"setBaseURI(string)": {
					"notice": "Set the base URI for all token IDs. It is automatically added as a prefix to the value returned in {tokenURI}, or to the token ID if {tokenURI} is empty."
				},
				"toggleDataURIEnabled()": {
					"notice": "Toggle a boolean value which determines if `tokenURI` returns a data URI or an HTTP URL."
				},
				"tokenURI(uint256,(string,string,uint8,string,string,string))": {
					"notice": "Given a token ID, construct a token URI for an official Vrbs DAO verb."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"packages/revolution-contracts/VerbsDescriptor.sol": "VerbsDescriptor"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Base64.sol": {
			"keccak256": "0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344",
			"license": "MIT",
			"urls": [
				"bzz-raw://81d8f5aabdb088f19c80ce460a2e670ecc651ff4ca46878d239e29bfe705e52c",
				"dweb:/ipfs/QmUveDGa7vEtYBxbVUajNcDvyjP6oaD7Va1M5qwZbudmAn"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867",
				"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
				"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
				"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
			]
		},
		"packages/revolution-contracts/IERC20.sol": {
			"keccak256": "0x3a239ccf79ef9b83e24ca1e33ba83d58a92cb95a8f91cfbe16922fa21ca1e4d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://0562394107a823a25d9d0c56df7bc2a495bd7d881dd807a90d7f7d8572e0229c",
				"dweb:/ipfs/QmdJMbe8F4u8BEUjiSedZpbLuzyuzGTvaaojZ9uST1q3jQ"
			]
		},
		"packages/revolution-contracts/VerbsDescriptor.sol": {
			"keccak256": "0x92a20e5fd4cd07702618435a322cad1dac91697da14a320531b0f3400fb3db9c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a6c4b980536eb0be44d34f58c4d42a5b6ed31e5ce3adc64939a9ce8378fd6fe7",
				"dweb:/ipfs/QmQBhc8W6hDjGXiSQmaQEY861TvqdhHUfSMbNsFnnv8BtA"
			]
		},
		"packages/revolution-contracts/interfaces/ICultureIndex.sol": {
			"keccak256": "0x6c1cbd665b80374f30f51048e393536a2d3049550539d42a90462973e750ef7d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://91b03b96e86ef46c46a510e1af1c9d1a56894fc70cf761a31b8fd8d727a17ef0",
				"dweb:/ipfs/QmYXHiVPtdgvrugJ5yTT4wqKYgYYUD9PZD7EsgcKLn7Uzs"
			]
		},
		"packages/revolution-contracts/interfaces/IVerbsDescriptor.sol": {
			"keccak256": "0x2065a3f6eb43b5a06e531b15ac8e32a46521c7c80b2e73ecd7e285438ec2e26a",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6190c0c4fdfcb40006e5b08238638c0f92f92f648216f3d1d4ff435892b32437",
				"dweb:/ipfs/Qmc9VQc6WWjMUZaeEojVaHtzmTBPfa9V2ZHTuhSZkDK5Wo"
			]
		},
		"packages/revolution-contracts/interfaces/IVerbsDescriptorMinimal.sol": {
			"keccak256": "0xc26ef29b32d9afe3074b02e522d42a39ccadc9653069011ea5436717c4e32211",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8b013f8790795e8e42320ba278792606efaa67ecf94814dc768b8984f02f0b6f",
				"dweb:/ipfs/QmZU5CWYPsfaU3bsFrX8B13ri8AYVYxBtJtV5z9WrYCCLS"
			]
		}
	},
	"version": 1
}